AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Resources:
  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions: 
        - 
          AttributeName: "Title"
          AttributeType: "S"
        - 
          AttributeName: "ItemGUID"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Title"
          KeyType: "HASH"
        - 
          AttributeName: "ItemGUID"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Feed"
  LambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  LambdaRolePolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "DynamoDBLimitedAccess"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:UpdateItem"
            Resource:
              Fn::GetAtt:
                - "DynamoDBTable"
                - "Arn"
      Roles:
        -
          Ref: "LambdaRole"
  LambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
     Runtime: go1.x
     Role:
       Fn::GetAtt:
         - "LambdaRole"
         - "Arn"
     Handler: "main" # any value seems to work here
     CodeUri: "cmd/"
     Environment:
       Variables:
         DDB_TABLE_NAME:
           Ref: "DynamoDBTable"
         # (optional) settings for telegram
         TELEGRAM_BOT_TOKEN: ""
         TELEGRAM_CHAT_ID: ""
         # (optional) settings for slack
         SLACK_WEBHOOK_URL: ""
     Timeout: 60
     Tracing: "Active"
  ScheduledRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "LambdaFunctionId"
          Input: "{\"url\":\"changeme\"}"
  PermissionForEventsToInvokeLambda: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName:
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
